library(myRFMcalculator)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
temp <- calculate_RFM(transactions,60,20,20)
table(temp$group)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
temp <- calculate_RFM(transactions,60,20,20)
table(temp$group)
library(myRFMcalculator)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
temp <- calculate_RFM(transactions,60,20,20)
table(temp$group)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
#Check the data format
str(transactions)
calculate_RFM <- function(data, weight_recency=1, weight_frequency=1, weight_monetary=1){
# adjusting values to ensure that the weights add up to one
weight_recency2 <- weight_recency/sum(weight_recency, weight_frequency, weight_monetary)
weight_frequency2 <- weight_frequency/sum(weight_recency, weight_frequency, weight_monetary)
weight_monetary2 <- weight_monetary/sum(weight_recency, weight_frequency, weight_monetary)
print("weights are calculated")
# RFM measures
max.Date <- max(data[,TransDate])
temp <- data[,list(
recency = as.numeric(max.Date - max(TransDate)),
frequency = .N,
monetary = mean(PurchAmount)),
by=Customer
]
print("RFM Measure done")
# RFM scores
temp <- temp[,list(Customer,
recency = as.numeric(cut2(-recency, g=3)),
frequency = as.numeric(cut2(frequency, g=3)),
monetary = as.numeric(cut2(monetary, g=3)))]
# Overall RFM score
temp[,finalscore:=weight_recency2*recency+weight_frequency2*frequency+weight_monetary2*monetary]
print("Overall RFM Measure done")
# RFM group
temp[,group:=round(finalscore)]
# Return final table
return(temp)
}
temp <- calculate_RFM(transactions,60,20,20)
table(temp$group)
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
myRFMcalculator::hello()
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
#Check the data format
str(transactions)
View(transactions)
temp <- myRFMcalculator::calculate_RFM(transactions,60,20,20)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
#Check the data format
str(transactions)
calculate_RFM <- function(data, weight_recency=1, weight_frequency=1, weight_monetary=1){
# adjusting values to ensure that the weights add up to one
weight_recency2 <- weight_recency/sum(weight_recency, weight_frequency, weight_monetary)
weight_frequency2 <- weight_frequency/sum(weight_recency, weight_frequency, weight_monetary)
weight_monetary2 <- weight_monetary/sum(weight_recency, weight_frequency, weight_monetary)
print("weights are calculated")
# RFM measures
max.Date <- max(data[,TransDate])
temp <- data[,list(
recency = as.numeric(max.Date - max(TransDate)),
frequency = .N,
monetary = mean(PurchAmount)),
by=Customer
]
print("RFM Measure done")
# RFM scores
temp <- temp[,list(Customer,
recency = as.numeric(cut2(-recency, g=3)),
frequency = as.numeric(cut2(frequency, g=3)),
monetary = as.numeric(cut2(monetary, g=3)))]
# Overall RFM score
temp[,finalscore:=weight_recency2*recency+weight_frequency2*frequency+weight_monetary2*monetary]
print("Overall RFM Measure done")
# RFM group
temp[,group:=round(finalscore)]
# Return final table
return(temp)
}
temp <- myRFMcalculator::calculate_RFM(transactions,60,20,20)
table(temp$group)
View(calculate_RFM)
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
#Check the data format
str(transactions)
temp <- myRFMcalculator::calculate_RFM(transactions,60,20,20)
table(temp$group)
install.packages("roxygen2")
usethis::use_readme_rmd()
rmarkdown::render("README.Rmd")
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
devtools::document()
install.packages("devtools")
devtools::document()
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(myRFMcalculator)
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
# Read in the data transactions.csv. ####
transactions <- fread("data/transactions.csv")
#Check the data format
str(transactions)
#date in POSIXct format. ####
transactions[, TransDate:=dmy(TransDate, tz = "UTC")]
#Check the data format
str(transactions)
temp <- myRFMcalculator::calculate_RFM(transactions,60,20,20)
table(temp$group)
table(temp$group)
install.packages("githubinstall")
